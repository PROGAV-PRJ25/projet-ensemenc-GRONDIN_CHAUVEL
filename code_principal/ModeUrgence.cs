// ModeUrgence.cs
public class ModeUrgence
{
    private Terrain terrain;
    private Random random;

    public ModeUrgence(Terrain terrain)
    {
        this.terrain = terrain;
        this.random = new Random();
    }

    public void DeclencherAttaqueDragon()
{
    Console.Clear();
    Console.ForegroundColor = ConsoleColor.Red;
    Console.WriteLine("üö® ALERTE URGENCE üö®");
    Console.WriteLine("Un dragon attaque votre potager !");
    Console.ResetColor();

    Thread.Sleep(2000);

    // Ajouter le dragon au terrain
    var (x, y, ancienneValeur) = AjouterDragonSurTerrain();
    terrain.AfficherT();

    ProposerChoixUrgence();

    // üîÅ Faire dispara√Ætre le dragon apr√®s l'action
    terrain.T[x, y] = ancienneValeur;

    Console.WriteLine("\nüêâ Le dragon a quitt√© le terrain...");
    terrain.AfficherT();
}

    private (int x, int y, int ancienneValeur) AjouterDragonSurTerrain()
    {
        int x = random.Next(0, terrain.Lignes);
        int y = random.Next(0, terrain.Colonnes);
        int ancienneValeur = terrain.T[x, y];

        terrain.T[x, y] = 20; // Code pour le dragon
        Console.WriteLine($"üêâ Le dragon appara√Æt en position ({x}, {y}) !");
        return (x, y, ancienneValeur);
    }

    private void ProposerChoixUrgence()
    {
        if (terrain.PlantesCultivees.Count == 0)
        {
            Console.WriteLine("Heureusement, il n'y a pas de plantes sur le terrain !");
            return;
        }

        Console.WriteLine("\nüî• Le dragon va attaquer ! Choisissez votre strat√©gie :");
        Console.WriteLine("1. üõ°Ô∏è  Prot√©ger toutes les plantes (elles deviennent malades)");
        Console.WriteLine("2. üèÉ √âvacuer la moiti√© des plantes (les autres sont d√©truites)");
        Console.Write("Votre choix (1 ou 2) : ");

        string choix = Console.ReadLine();

        switch (choix)
        {
            case "1":
                ExecuterProtectionTotale();
                break;
            case "2":
                ExecuterEvacuationPartielle();
                break;
            default:
                Console.WriteLine("Choix invalide ! √âvacuation par d√©faut...");
                ExecuterEvacuationPartielle();
                break;
        }

        // Afficher le terrain apr√®s l'attaque
        Console.WriteLine("\n√âtat du terrain apr√®s l'attaque :");
        terrain.AfficherT();
    }

    private void ExecuterProtectionTotale()
    {
        Console.WriteLine("\nüõ°Ô∏è PROTECTION TOTALE ACTIV√âE !");
        Console.WriteLine("Toutes vos plantes sont prot√©g√©es mais tombent malades...");

        Thread.Sleep(1500);

        // Toutes les plantes deviennent malades
        foreach (var plante in terrain.PlantesCultivees)
        {
            plante.Contaminer("attaque de dragon");
        }

        Console.WriteLine($"‚úÖ {terrain.PlantesCultivees.Count} plantes sauv√©es (mais malades) !");
        Console.WriteLine("üí° Utilisez des soins pour les gu√©rir.");
    }

    private void ExecuterEvacuationPartielle()
    {
        Console.WriteLine("\nüèÉ √âVACUATION PARTIELLE ACTIV√âE !");

        int nombreTotal = terrain.PlantesCultivees.Count;
        int nombreADetruire = nombreTotal / 2;

        // S√©lectionner al√©atoirement les plantes √† d√©truire
        var plantesADetruire = terrain.PlantesCultivees
            .OrderBy(x => random.Next())
            .Take(nombreADetruire)
            .ToList();

        Console.WriteLine($"üå± {nombreTotal - nombreADetruire} plantes √©vacu√©es avec succ√®s !");
        Console.WriteLine($"üíÄ {nombreADetruire} plantes seront d√©truites...");

        Thread.Sleep(1500);

        // Marquer les positions comme br√ªl√©es et retirer les plantes
        foreach (var plante in plantesADetruire)
        {
            terrain.T[plante.PositionX, plante.PositionY] = 21; // feu
        }

        // Retirer les plantes d√©truites de la liste
        terrain.PlantesCultivees.RemoveAll(p => plantesADetruire.Contains(p));

        Console.ForegroundColor = ConsoleColor.Yellow;
        Console.WriteLine($"‚öñÔ∏è  BILAN : {nombreTotal - nombreADetruire} sauv√©es, {nombreADetruire} perdues");
        Console.ResetColor();
    }
}

